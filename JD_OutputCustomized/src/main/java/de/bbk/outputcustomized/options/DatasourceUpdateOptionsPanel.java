/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package de.bbk.outputcustomized.options;

import de.bbk.outputcustomized.servicedefinition.IExternalDataProvider;
import java.util.Collection;
import java.util.prefs.Preferences;
import org.openide.util.Lookup;
import org.openide.util.NbPreferences;

public final class DatasourceUpdateOptionsPanel extends javax.swing.JPanel {

    private final DatasourceUpdateOptionsOptionsPanelController controller;

    public DatasourceUpdateOptionsPanel(DatasourceUpdateOptionsOptionsPanelController controller) {
        this.controller = controller;
        initComponents();

        // TODO listen to changes in form fields and call controller.changed()
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        checkBoxDefaultDataSource = new javax.swing.JCheckBox();
        providerBox = new javax.swing.JComboBox();

        checkBoxDefaultDataSource.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(checkBoxDefaultDataSource, org.openide.util.NbBundle.getMessage(DatasourceUpdateOptionsPanel.class, "DatasourceUpdateOptionsPanel.checkBoxDefaultDataSource.text")); // NOI18N
        checkBoxDefaultDataSource.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                checkBoxDefaultDataSourceStateChanged(evt);
            }
        });

        Collection<? extends IExternalDataProvider> collection =Lookup.getDefault().lookupAll(IExternalDataProvider.class);
        String[] names = collection.stream().map(x -> x.getClass().getName()).toArray(size -> new String[size]);
        providerBox.setModel(new javax.swing.DefaultComboBoxModel(names));
        providerBox.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(checkBoxDefaultDataSource, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(providerBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(240, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(checkBoxDefaultDataSource)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(providerBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void checkBoxDefaultDataSourceStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_checkBoxDefaultDataSourceStateChanged
        providerBox.setEnabled(!checkBoxDefaultDataSource.isSelected());
    }//GEN-LAST:event_checkBoxDefaultDataSourceStateChanged

    void load() {
        Preferences preferences = NbPreferences.forModule(DatasourceUpdateOptionsPanel.class);
        String providerName = preferences.get(PROVIDERNAME, "");
        providerBox.setSelectedItem(providerName);

        boolean b = NbPreferences.forModule(DatasourceUpdateOptionsPanel.class).getBoolean(USEDEFAULT, true);
        checkBoxDefaultDataSource.setSelected(b || providerBox.getItemCount()==0);
        checkBoxDefaultDataSource.setEnabled(providerBox.getItemCount()!=0);

    }
    public static final String USEDEFAULT = "useDefault",
            PROVIDERNAME = "providerName";

    void store() {
        Preferences preferences = NbPreferences.forModule(DatasourceUpdateOptionsPanel.class);
        boolean useDefault = checkBoxDefaultDataSource.isSelected();
        preferences.putBoolean(USEDEFAULT, useDefault);
        if (!useDefault) {
            preferences.put(PROVIDERNAME, (String) providerBox.getSelectedItem());
        } else {
            preferences.remove(PROVIDERNAME);
        }

    }

    boolean valid() {
        // TODO check whether form is consistent and complete
        return true;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox checkBoxDefaultDataSource;
    private javax.swing.JComboBox providerBox;
    // End of variables declaration//GEN-END:variables

}
