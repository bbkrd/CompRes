/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package de.bbk.autoconcur;

import ec.nbdemetra.ui.properties.NodePropertySetBuilder;
import java.beans.PropertyVetoException;
import javax.swing.JPanel;
import lombok.Getter;
import org.openide.explorer.ExplorerManager;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.Children;
import org.openide.nodes.Node;
import org.openide.nodes.Sheet;
import org.openide.util.Exceptions;

/**
 *
 * @author Jan Gerhardt
 */
public class CompResMetadataPanel extends JPanel implements ExplorerManager.Provider {

    ExplorerManager em;
    @Getter
    DecisionBean bean;
    @Getter
    MetadataBean metaBean;

    public CompResMetadataPanel() {
        em = new ExplorerManager();
        initComponents();

        bean = new DecisionBean();
        metaBean = new MetadataBean();
        Node[] node = new Node[1];
        node[0] = new MetadataNode(Children.LEAF, bean, metaBean);
        em.setRootContext(node[0]);
        try {
            em.setSelectedNodes(node);
        } catch (PropertyVetoException ex) {
            Exceptions.printStackTrace(ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        metadataProperties = new org.openide.explorer.propertysheet.PropertySheetView();

        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setPreferredSize(new java.awt.Dimension(400, 350));
        setLayout(new java.awt.BorderLayout());

        metadataProperties.setNodes(null);
        metadataProperties.setPreferredSize(new java.awt.Dimension(400, 300));
        add(metadataProperties, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.openide.explorer.propertysheet.PropertySheetView metadataProperties;
    // End of variables declaration//GEN-END:variables
    @Override
    public ExplorerManager getExplorerManager() {
        return em;
    }

    private final static class MetadataNode extends AbstractNode {

        private final DecisionBean bean;
        private final MetadataBean metaBean;

        public MetadataNode(Children children, DecisionBean bean, MetadataBean metaBean) {
            super(children);
            this.bean = bean;
            this.metaBean = metaBean;
        }

        @Override
        protected Sheet createSheet() {
            NodePropertySetBuilder b = new NodePropertySetBuilder();
            Sheet s = super.createSheet();
            s.put(createOverwrites(b));
            s.put(createMetadata(b));
            return s;
        }

        private Sheet.Set createOverwrites(NodePropertySetBuilder b) {
            b.reset("overwriteParams")
                    .display("Select what to change");

            b.withBoolean()
                    .select(metaBean, "partial")
                    .display("Partial concurrent adjustment")
                    .description("Items is to be adjusted with partial concurrent adjustment.")
                    .add();
            b.withBoolean()
                    .select(metaBean, "checkPrevious")
                    .display("Check previous period")
                    .description("Consider both the current and the previous period for the recommendation.")
                    .add();
            b.withBoolean()
                    .select(metaBean, "manual")
                    .display("Manual check")
                    .description("SaItem is to be checked manually.")
                    .add();
            b.withBoolean()
                    .select(metaBean, "checkSign")
                    .display("Check sign of growth rate")
                    .description("Check if the sign of growth rates changes with reestimation.")
                    .add();
            b.withBoolean()
                    .select(metaBean, "nSD")
                    .display("Number of Standard Deviations")
                    .description("Number of trimmed standard deviations to span the confidence interval around the trimmed mean of growth rates.")
                    .add();
            b.withBoolean()
                    .select(metaBean, "nD8")
                    .display("Number of periods for seasonal factors")
                    .description("Number of last periods used for determing the range of seasonal factors.")
                    .add();
            b.withBoolean()
                    .select(metaBean, "nGrowth")
                    .display("Number of periods for growth rates")
                    .description("Number of last periods used for calculating the confidence interval of growth rates.")
                    .add();
            b.withBoolean()
                    .select(metaBean, "tolD8")
                    .display("Tolerance for seasonal factors")
                    .description("Max tolerance for the current seasonal factor to be outside the range.")
                    .add();
            b.withBoolean()
                    .select(metaBean, "toleranceGrowth")
                    .display("Tolerance for current growth rates")
                    .description("Max acceptable difference between old current and new current growth rate.")
                    .add();
            b.withBoolean()
                    .select(metaBean, "trim")
                    .display("Trim for growth rates")
                    .description("Fraction of lowest and highest growth rates to be left out of calculation the confidence interval.")
                    .add();

            return b.build();
        }

        private Sheet.Set createMetadata(NodePropertySetBuilder b) {
            b.reset("sourceParams")
                    .display("Select how to change");
            b.withBoolean()
                    .select(bean, "partial")
                    .display("Partial concurrent adjustment")
                    .description("Items is to be adjusted with partial concurrent adjustment.")
                    .add();
            b.withBoolean()
                    .select(bean, "checkPrevious")
                    .display("Check previous period")
                    .description("Consider both the current and the previous period for the recommendation.")
                    .add();

            b.withBoolean()
                    .select(bean, "manual")
                    .display("Manual check")
                    .description("SaItem is to be checked manually.")
                    .add();

            b.withBoolean()
                    .select(bean, "checkSign")
                    .display("Check sign of growth rate")
                    .description("Check if the sign of growth rates changes with reestimation.")
                    .add();

            b.withInt()
                    .select(bean, "nSD")
                    .display("Number of Standard Deviations")
                    .description("Number of trimmed standard deviations to span the confidence interval around the trimmed mean of growth rates.")
                    .add();

            b.withInt()
                    .select(bean, "nD8")
                    .display("Number of periods for seasonal factors")
                    .description("Number of last periods used for determing the range of seasonal factors.")
                    .add();

            b.withInt()
                    .select(bean, "nGrowth")
                    .display("Number of periods for growth rates")
                    .description("Number of last periods used for calculating the confidence interval of growth rates.")
                    .add();

            b.withDouble()
                    .select(bean, "tolD8")
                    .display("Tolerance for seasonal factors")
                    .description("Max tolerance for the current seasonal factor to be outside the range.")
                    .add();

            b.withDouble()
                    .select(bean, "toleranceGrowth")
                    .display("Tolerance for current growth rates")
                    .description("Max acceptable difference between old current and new current growth rate.")
                    .add();

            b.withDouble()
                    .select(bean, "trim")
                    .display("Trim for growth rates")
                    .description("Fraction of lowest and highest growth rates to be left out of calculation the confidence interval.")
                    .add();

            return b.build();
        }

    }
}
