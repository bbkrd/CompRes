/*
 * Copyright 2017 Deutsche Bundesbank
 *
 * Licensed under the EUPL, Version 1.1 or â€“ as soon they
 * will be approved by the European Commission - subsequent
 * versions of the EUPL (the "Licence");
 * You may not use this work except in compliance with the
 * Licence.
 * You may obtain a copy of the Licence at:
 *
 * http://ec.europa.eu/idabc/eupl.html
 *
 * Unless required by applicable law or agreed to in
 * writing, software distributed under the Licence is
 * distributed on an "AS IS" basis,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied.
 * See the Licence for the specific language governing
 * permissions and limitations under the Licence.
 */
package de.bbk.concur.options;

import de.bbk.concur.servicedefinition.IExternalDataProvider;
import ec.satoolkit.x11.X11Kernel;
import ec.util.list.swing.JListSelection;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.prefs.Preferences;
import java.util.stream.Collectors;
import org.openide.util.Lookup;
import org.openide.util.NbPreferences;

public final class DatasourceUpdateOptionsPanel extends javax.swing.JPanel {

    private final DatasourceUpdateOptionsOptionsPanelController controller;
    private final JListSelection matrixOneSelection, matrixTwoSelection;

    public static final String USEDEFAULT = "useDefault",
            PROVIDERNAME = "providerName",
            MATRIX_VIEW_ONE = "matrixViewOne",
            MATRIX_VIEW_ONE_DEFAULT = "a1;b1;d11;d12",
            MATRIX_VIEW_TWO = "matrixViewTwo",
            MATRIX_VIEW_TWO_DEFAULT = "a6;a9;d10;d13";

    private static final List<String> ALL_X11_TABLES;
    private static final HashMap<String, Integer> POSITION = new HashMap<>();

    static {
        ALL_X11_TABLES = new ArrayList<>();
        ALL_X11_TABLES.addAll(Arrays.asList(X11Kernel.ALL_A));
        ALL_X11_TABLES.addAll(Arrays.asList(X11Kernel.ALL_B));
        ALL_X11_TABLES.addAll(Arrays.asList(X11Kernel.ALL_C));
        ALL_X11_TABLES.addAll(Arrays.asList(X11Kernel.ALL_D));
        ALL_X11_TABLES.addAll(Arrays.asList(X11Kernel.ALL_E));

        int counter = 0;
        for (String string : ALL_X11_TABLES) {
            POSITION.put(string, counter++);
        }
    }

    public DatasourceUpdateOptionsPanel(DatasourceUpdateOptionsOptionsPanelController controller) {
        this.controller = controller;
        initComponents();
        matrixOneSelection = new JListSelection();
        matrixTabs.add("Matrix view one", matrixOneSelection);
        matrixTwoSelection = new JListSelection();
        matrixTabs.add("Matrix view two", matrixTwoSelection);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        checkBoxDefaultDataSource = new javax.swing.JCheckBox();
        providerBox = new javax.swing.JComboBox();
        matrixTabs = new javax.swing.JTabbedPane();

        checkBoxDefaultDataSource.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(checkBoxDefaultDataSource, org.openide.util.NbBundle.getMessage(DatasourceUpdateOptionsPanel.class, "DatasourceUpdateOptionsPanel.checkBoxDefaultDataSource.text")); // NOI18N
        checkBoxDefaultDataSource.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                checkBoxDefaultDataSourceStateChanged(evt);
            }
        });

        Collection<? extends IExternalDataProvider> collection =Lookup.getDefault().lookupAll(IExternalDataProvider.class);
        String[] names = collection.stream().map(x -> x.getClass().getName()).toArray(size -> new String[size]);
        providerBox.setModel(new javax.swing.DefaultComboBoxModel(names));
        providerBox.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(matrixTabs)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(checkBoxDefaultDataSource, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(providerBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 121, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(checkBoxDefaultDataSource)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(providerBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(matrixTabs, javax.swing.GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void checkBoxDefaultDataSourceStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_checkBoxDefaultDataSourceStateChanged
        providerBox.setEnabled(!checkBoxDefaultDataSource.isSelected());
    }//GEN-LAST:event_checkBoxDefaultDataSourceStateChanged

    void load() {
        Preferences preferences = NbPreferences.forModule(DatasourceUpdateOptionsPanel.class);
        String providerName = preferences.get(PROVIDERNAME, "");
        providerBox.setSelectedItem(providerName);

        boolean b = preferences.getBoolean(USEDEFAULT, true);
        checkBoxDefaultDataSource.setSelected(b || providerBox.getItemCount() == 0);
        checkBoxDefaultDataSource.setEnabled(providerBox.getItemCount() != 0);

        String mvo = preferences.get(MATRIX_VIEW_ONE, MATRIX_VIEW_ONE_DEFAULT);
        final List<String> rightElements = Arrays.asList(mvo.split(";"));
        matrixOneSelection.getSourceModel().clear();
        ALL_X11_TABLES.stream().filter(x -> !rightElements.contains(x)).forEach(x -> matrixOneSelection.getSourceModel().addElement(x));
        matrixOneSelection.getTargetModel().clear();
        rightElements.stream().forEach(x -> matrixOneSelection.getTargetModel().addElement(x));

        String mvt = preferences.get(MATRIX_VIEW_TWO, MATRIX_VIEW_TWO_DEFAULT);
        final List<String> rightElements2 = Arrays.asList(mvt.split(";"));
        matrixTwoSelection.getSourceModel().clear();
        ALL_X11_TABLES.stream().filter(x -> !rightElements2.contains(x)).forEach(x -> matrixTwoSelection.getSourceModel().addElement(x));
        matrixTwoSelection.getTargetModel().clear();
        rightElements2.stream().forEach(x -> matrixTwoSelection.getTargetModel().addElement(x));
    }

    void store() {
        Preferences preferences = NbPreferences.forModule(DatasourceUpdateOptionsPanel.class);
        boolean useDefault = checkBoxDefaultDataSource.isSelected();
        preferences.putBoolean(USEDEFAULT, useDefault);
        if (!useDefault) {
            preferences.put(PROVIDERNAME, (String) providerBox.getSelectedItem());
        } else {
            preferences.remove(PROVIDERNAME);
        }

        String mvo = Arrays.stream(matrixOneSelection.getTargetModel().toArray())
                .map(x -> x.toString())
                .sorted(this::sortByPosition)
                .collect(Collectors.joining(";"));
        preferences.put(MATRIX_VIEW_ONE, mvo);

        String mvt = Arrays.stream(matrixTwoSelection.getTargetModel().toArray())
                .map(x -> x.toString())
                .sorted(this::sortByPosition)
                .collect(Collectors.joining(";"));
        preferences.put(MATRIX_VIEW_TWO, mvt);

    }

    boolean valid() {
        // TODO check whether form is consistent and complete
        return true;
    }

    private int sortByPosition(String o1, String o2) {
        Integer o1Position = POSITION.getOrDefault(o1, -1);
        Integer o2Position = POSITION.getOrDefault(o2, -1);
        return Integer.compare(o1Position, o2Position);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox checkBoxDefaultDataSource;
    private javax.swing.JTabbedPane matrixTabs;
    private javax.swing.JComboBox providerBox;
    // End of variables declaration//GEN-END:variables

}
